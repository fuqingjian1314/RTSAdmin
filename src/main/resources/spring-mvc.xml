<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd    
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-4.2.xsd    
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
                            http://www.springframework.org/schema/aop    
                       	 	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
                            
    <!-- 配置日志管理aop -->                        
	<aop:aspectj-autoproxy />
	<!-- 启动对@AspectJ注解的支持 -->
	<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
	<!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!--<bean class="com.dgg.sys.aspect.SystemLogAspect" />-->
    <!--<bean id="springContextHolder" class="com.dgg.sys.aspect.SpringContextHolder" />-->

	<!--默认的mvc注解映射的支持 -->
	<mvc:annotation-driven />
	<!-- Spring MVC配置 -->
	<context:annotation-config />
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.sjg" />

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 处理请求时返回json字符串的中文乱码问题 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 处理请求时返回json字符串的中文乱码问题 end -->
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>

		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
	<mvc:interceptors>
		<!-- 登录拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login.shtml" />
			<mvc:exclude-mapping path="/loginSystem.shtml" />
			<mvc:exclude-mapping path="/checkValidateCode.shtml" />
			<mvc:exclude-mapping path="/ValidateCode/validate.shtml" />
			<mvc:exclude-mapping path="/websocket.shtml" />
			<mvc:exclude-mapping path="/appClient/*" />
			<mvc:exclude-mapping path="/betorder/*" />
			<ref bean="loginInterceptor" />
		</mvc:interceptor>
		<!-- 菜单拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login.shtml" />
			<mvc:exclude-mapping path="/loginSystem.shtml" />
			<mvc:exclude-mapping path="/checkValidateCode.shtml" />
			<mvc:exclude-mapping path="/ValidateCode/validate.shtml" />
			<mvc:exclude-mapping path="/websocket.shtml" />
			<mvc:exclude-mapping path="/appClient/*" />
			<mvc:exclude-mapping path="/betorder/*" />
			<ref bean="roleInterceptor" />
		</mvc:interceptor>
		<!-- 拦截所有的请求，获取当前页的button以及url权限() -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login.shtml" />
			<mvc:exclude-mapping path="/loginSystem.shtml" />
			<mvc:exclude-mapping path="/index.shtml" />
			<mvc:exclude-mapping path="/checkValidateCode.shtml" />
			<mvc:exclude-mapping path="/ValidateCode/validate.shtml" />
			<mvc:exclude-mapping path="/loginOut.shtml" />
			<mvc:exclude-mapping path="/user/returnUserDetail.shtml" />
			<mvc:exclude-mapping path="/websocket.shtml" />
			<mvc:exclude-mapping path="/appClient/*" />
			<mvc:exclude-mapping path="/betorder/*" />
			<ref bean="btnInterceptor" />
		</mvc:interceptor>

	</mvc:interceptors>

	<!-- 登录拦截器 -->
	<bean id="loginInterceptor" class="com.sjg.sys.interceptor.LoginInterceptor">
		<property name="gotoUri" value="/login.shtml"></property>
		<property name="excludeUris">
			<set>
				<value>/login.shtml</value>
			</set>
		</property>
	</bean>
	<!-- 菜单权限拦截器 -->
	<bean id="roleInterceptor" class="com.sjg.sys.interceptor.RoleInterceptor">
	</bean>
	<!-- 拦截所有的请求，获取当前页的button以及url权限 -->
	<bean id="btnInterceptor" class="com.sjg.sys.interceptor.BtnPermissionsInterceptor"></bean>
	
	<!-- websocket 功能配置 -->
	<bean id="sysWebSocketConfig" class="com.sjg.sys.ext.websocket.SysWebSocketConfig">
	</bean>
</beans>  